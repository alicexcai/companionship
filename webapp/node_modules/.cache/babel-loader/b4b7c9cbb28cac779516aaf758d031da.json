{"ast":null,"code":"var _jsxFileName = \"/Users/alicecai/Desktop/gpt3-chat/src/components/MessageList/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Compose from \"../Compose\";\nimport Message from \"../Message\";\nimport \"./MessageList.css\";\nimport Toolbar from \"../Toolbar\";\nimport GPTService from \"../../services/gpt\";\nimport MessageBuilderService from \"../../services/message-builder\";\nimport TypingIndicator from \"../TypingIndicator\";\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MY_USER_ID = \"Patient\";\nexport default function MessageList() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState([{\n    author: \"Therapist\",\n    message: \"Hi friend! I'm your virtual therapist. How are you feeling today?\",\n    timestamp: new Date().getTime()\n  }]); // Stays scrolled to bottom.\n\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (messagesEndRef) {\n      var _messagesEndRef$curre;\n\n      (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  });\n\n  const addMyMessage = async value => {\n    const newMessage = {\n      author: MY_USER_ID,\n      message: value,\n      timestamp: new Date().getTime()\n    };\n    setMessages(previous => [...previous, newMessage]);\n    setLoading(true);\n    const withMine = [...messages, newMessage];\n    const response = await GPTService.getAIResponse(withMine);\n    const responseMessage = {\n      author: \"Therapist\",\n      message: response,\n      timestamp: new Date().getTime()\n    };\n    setMessages(previous => [...previous, responseMessage]);\n    setLoading(false);\n  };\n\n  const options = ['Intellectual Conversation', 'Theraputic Conversation', 'Playful Conversation', 'Problem-solving Conversation', 'Open-ended Conversation'];\n  const defaultOption = options[0];\n  const [option, setOption] = useState(defaultOption);\n  const conversationDict = [{\n    id: \"Intellectual Conversation\",\n    character: \"Professor\"\n  }, {\n    id: \"Theraputic Conversation\",\n    character: \"Professor\"\n  }, {\n    id: \"Playful Conversation\",\n    character: \"Professor\"\n  }, {\n    id: \"Problem-solving Conversation\",\n    character: \"Professor\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-list\",\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n      title: \"Chat with GPT3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"What kind of conversation do you want to have?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n      options: options,\n      onChange: e => {\n        setOption(e.value);\n        console.log(option);\n      },\n      value: defaultOption,\n      placeholder: \"Select conversation type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-list-container\",\n      children: [MessageBuilderService.getMessages(messages, MY_USER_ID), loading && /*#__PURE__*/_jsxDEV(TypingIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Compose, {\n      addMessage: addMyMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MessageList, \"pWv2sxDC3B6hFqyDwmtTPxsLd3g=\");\n\n_c = MessageList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"sources":["/Users/alicecai/Desktop/gpt3-chat/src/components/MessageList/index.tsx"],"names":["React","useEffect","useRef","useState","Compose","Message","Toolbar","GPTService","MessageBuilderService","TypingIndicator","Dropdown","MY_USER_ID","MessageList","loading","setLoading","messages","setMessages","author","message","timestamp","Date","getTime","messagesEndRef","current","scrollIntoView","behavior","addMyMessage","value","newMessage","previous","withMine","response","getAIResponse","responseMessage","options","defaultOption","option","setOption","conversationDict","id","character","e","console","log","getMessages"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport Compose from \"../Compose\";\nimport Message from \"../Message\";\nimport moment from \"moment\";\n\nimport \"./MessageList.css\";\nimport Toolbar from \"../Toolbar\";\nimport GPTService from \"../../services/gpt\";\nimport MessageBuilderService from \"../../services/message-builder\";\nimport TypingIndicator from \"../TypingIndicator\";\n\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nconst MY_USER_ID = \"Patient\";\n\nexport interface Message {\n  author: string;\n  message: string;\n  timestamp: number;\n}\nexport default function MessageList() {\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState([\n    {\n      author: \"Therapist\",\n      message:\n        \"Hi friend! I'm your virtual therapist. How are you feeling today?\",\n      timestamp: new Date().getTime(),\n    },\n  ] as Message[]);\n\n  // Stays scrolled to bottom.\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (messagesEndRef) {\n      (messagesEndRef.current as any)?.scrollIntoView({ behavior: \"smooth\" })\n    }\n  });\n  const addMyMessage = async (value: string) => {\n    const newMessage = {\n      author: MY_USER_ID,\n      message: value,\n      timestamp: new Date().getTime(),\n    };\n    \n    setMessages((previous) => [...previous, newMessage]);\n    setLoading(true);\n    const withMine = [...messages, newMessage];\n    const response = await GPTService.getAIResponse(withMine);\n    const responseMessage = {\n      author: \"Therapist\",\n      message: response,\n      timestamp: new Date().getTime(),\n    };\n    setMessages((previous) => [...previous, responseMessage]);\n    setLoading(false);\n  };\n\n  const options = [\n    'Intellectual Conversation',\n    'Theraputic Conversation',\n    'Playful Conversation',\n    'Problem-solving Conversation',\n    'Open-ended Conversation'\n  ];\n  const defaultOption = options[0];\n  const [option, setOption] = useState(defaultOption);\n\n  const conversationDict = [\n    {id: \"Intellectual Conversation\", character: \"Professor\"},\n    {id: \"Theraputic Conversation\", character: \"Professor\"},\n    {id: \"Playful Conversation\", character: \"Professor\"},\n    {id: \"Problem-solving Conversation\", character: \"Professor\"},\n  ]\n\n  return (\n    <div className=\"message-list\">\n      <Toolbar title=\"Chat with GPT3\" />\n      {/* <Dropdown title=\"Select conversatio type\" /> */}\n      <h4>What kind of conversation do you want to have?</h4>\n      <Dropdown options={options} onChange={(e) => {setOption(e.value); console.log(option)}} value={defaultOption} placeholder=\"Select conversation type\" />\n\n      <div className=\"message-list-container\">{MessageBuilderService.getMessages(messages, MY_USER_ID)}\n      {loading && <TypingIndicator />}\n      <div ref={messagesEndRef} />\n      </div>\n      \n\n      <Compose addMessage={addMyMessage} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}