{"ast":null,"code":"var _jsxFileName = \"/Users/alicecai/Desktop/gpt3-chat/src/components/MessageList/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Compose from \"../Compose\";\nimport Message from \"../Message\";\nimport \"./MessageList.css\";\nimport Toolbar from \"../Toolbar\";\nimport GPTService from \"../../services/gpt\";\nimport MessageBuilderService from \"../../services/message-builder\";\nimport TypingIndicator from \"../TypingIndicator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MY_USER_ID = \"Patient\";\nexport default function MessageList() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState([{\n    author: \"Therapist\",\n    message: \"Hi friend! I'm your virtual therapist. How are you feeling today?\",\n    timestamp: new Date().getTime()\n  }]); // Stays scrolled to bottom.\n\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (messagesEndRef) {\n      var _messagesEndRef$curre;\n\n      (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  });\n\n  const addMyMessage = async value => {\n    const newMessage = {\n      author: MY_USER_ID,\n      message: value,\n      timestamp: new Date().getTime()\n    };\n    setMessages(previous => [...previous, newMessage]);\n    setLoading(true);\n    const withMine = [...messages, newMessage];\n    const response = await GPTService.getAIResponse(withMine);\n    const responseMessage = {\n      author: \"Therapist\",\n      message: response,\n      timestamp: new Date().getTime()\n    };\n    setMessages(previous => [...previous, responseMessage]);\n    setLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-list\",\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n      title: \"Chat with GPT3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n      title: \"Select conversatio type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-list-container\",\n      children: [MessageBuilderService.getMessages(messages, MY_USER_ID), loading && /*#__PURE__*/_jsxDEV(TypingIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Compose, {\n      addMessage: addMyMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MessageList, \"1hmUzT5vgbLySR4bpIdvcoZAQcQ=\");\n\n_c = MessageList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"sources":["/Users/alicecai/Desktop/gpt3-chat/src/components/MessageList/index.tsx"],"names":["React","useEffect","useRef","useState","Compose","Message","Toolbar","GPTService","MessageBuilderService","TypingIndicator","MY_USER_ID","MessageList","loading","setLoading","messages","setMessages","author","message","timestamp","Date","getTime","messagesEndRef","current","scrollIntoView","behavior","addMyMessage","value","newMessage","previous","withMine","response","getAIResponse","responseMessage","getMessages"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAGA,OAAO,mBAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,qBAAP,MAAkC,gCAAlC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;;AAEA,MAAMC,UAAU,GAAG,SAAnB;AAOA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,CACvC;AACEa,IAAAA,MAAM,EAAE,WADV;AAEEC,IAAAA,OAAO,EACL,mEAHJ;AAIEC,IAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AAJb,GADuC,CAAD,CAAxC,CAFoC,CAWpC;;AACA,QAAMC,cAAc,GAAGnB,MAAM,CAAC,IAAD,CAA7B;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoB,cAAJ,EAAoB;AAAA;;AAClB,+BAACA,cAAc,CAACC,OAAhB,gFAAiCC,cAAjC,CAAgD;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAhD;AACD;AACF,GAJQ,CAAT;;AAKA,QAAMC,YAAY,GAAG,MAAOC,KAAP,IAAyB;AAC5C,UAAMC,UAAU,GAAG;AACjBX,MAAAA,MAAM,EAAEN,UADS;AAEjBO,MAAAA,OAAO,EAAES,KAFQ;AAGjBR,MAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AAHM,KAAnB;AAMAL,IAAAA,WAAW,CAAEa,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcD,UAAd,CAAf,CAAX;AACAd,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMgB,QAAQ,GAAG,CAAC,GAAGf,QAAJ,EAAca,UAAd,CAAjB;AACA,UAAMG,QAAQ,GAAG,MAAMvB,UAAU,CAACwB,aAAX,CAAyBF,QAAzB,CAAvB;AACA,UAAMG,eAAe,GAAG;AACtBhB,MAAAA,MAAM,EAAE,WADc;AAEtBC,MAAAA,OAAO,EAAEa,QAFa;AAGtBZ,MAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AAHW,KAAxB;AAKAL,IAAAA,WAAW,CAAEa,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcI,eAAd,CAAf,CAAX;AACAnB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAlBD;;AAoBA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,iBAAyCL,qBAAqB,CAACyB,WAAtB,CAAkCnB,QAAlC,EAA4CJ,UAA5C,CAAzC,EACCE,OAAO,iBAAI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cADZ,eAEA;AAAK,QAAA,GAAG,EAAES;AAAV;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAUE,QAAC,OAAD;AAAS,MAAA,UAAU,EAAEI;AAArB;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GApDuBd,W;;KAAAA,W","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport Compose from \"../Compose\";\nimport Message from \"../Message\";\nimport moment from \"moment\";\n\nimport \"./MessageList.css\";\nimport Toolbar from \"../Toolbar\";\nimport GPTService from \"../../services/gpt\";\nimport MessageBuilderService from \"../../services/message-builder\";\nimport TypingIndicator from \"../TypingIndicator\";\n\nconst MY_USER_ID = \"Patient\";\n\nexport interface Message {\n  author: string;\n  message: string;\n  timestamp: number;\n}\nexport default function MessageList() {\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState([\n    {\n      author: \"Therapist\",\n      message:\n        \"Hi friend! I'm your virtual therapist. How are you feeling today?\",\n      timestamp: new Date().getTime(),\n    },\n  ] as Message[]);\n\n  // Stays scrolled to bottom.\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (messagesEndRef) {\n      (messagesEndRef.current as any)?.scrollIntoView({ behavior: \"smooth\" })\n    }\n  });\n  const addMyMessage = async (value: string) => {\n    const newMessage = {\n      author: MY_USER_ID,\n      message: value,\n      timestamp: new Date().getTime(),\n    };\n    \n    setMessages((previous) => [...previous, newMessage]);\n    setLoading(true);\n    const withMine = [...messages, newMessage];\n    const response = await GPTService.getAIResponse(withMine);\n    const responseMessage = {\n      author: \"Therapist\",\n      message: response,\n      timestamp: new Date().getTime(),\n    };\n    setMessages((previous) => [...previous, responseMessage]);\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"message-list\">\n      <Toolbar title=\"Chat with GPT3\" />\n      <Dropdown title=\"Select conversatio type\" />\n\n      <div className=\"message-list-container\">{MessageBuilderService.getMessages(messages, MY_USER_ID)}\n      {loading && <TypingIndicator />}\n      <div ref={messagesEndRef} />\n      </div>\n      \n\n      <Compose addMessage={addMyMessage} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}