{"ast":null,"code":"var _jsxFileName = \"/Users/alicecai/Desktop/gpt3-chat/src/services/message-builder.tsx\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport MessageComponent from \"../components/Message\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageBuilderService = {\n  getMessages(messages, myUserId) {\n    let i = 0;\n    let messageCount = messages.length;\n    let tempMessages = [];\n\n    while (i < messageCount) {\n      let previous = messages[i - 1];\n      let current = messages[i];\n      let next = messages[i + 1];\n      let isMine = current.author === myUserId;\n      let currentMoment = moment(current.timestamp);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = true;\n\n      if (previous) {\n        let previousMoment = moment(previous.timestamp);\n        let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n\n        if (prevBySameAuthor && previousDuration.as(\"hours\") < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as(\"hours\") < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        let nextMoment = moment(next.timestamp);\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as(\"hours\") < 1) {\n          endsSequence = false;\n        }\n      }\n\n      tempMessages.push( /*#__PURE__*/_jsxDEV(MessageComponent, {\n        isMine: isMine,\n        startsSequence: startsSequence,\n        endsSequence: endsSequence,\n        showTimestamp: showTimestamp,\n        data: current\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this));\n      i += 1;\n    }\n\n    return tempMessages;\n  }\n\n};\nexport default MessageBuilderService;","map":{"version":3,"sources":["/Users/alicecai/Desktop/gpt3-chat/src/services/message-builder.tsx"],"names":["moment","React","MessageComponent","MessageBuilderService","getMessages","messages","myUserId","i","messageCount","length","tempMessages","previous","current","next","isMine","author","currentMoment","timestamp","prevBySameAuthor","nextBySameAuthor","startsSequence","endsSequence","showTimestamp","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","push"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;;AAGA,MAAMC,qBAAqB,GAAG;AAC5BC,EAAAA,WAAW,CAACC,QAAD,EAAsBC,QAAtB,EAAwC;AACjD,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,YAAY,GAAGH,QAAQ,CAACI,MAA5B;AACA,QAAIC,YAAY,GAAG,EAAnB;;AAEA,WAAOH,CAAC,GAAGC,YAAX,EAAyB;AACvB,UAAIG,QAAQ,GAAGN,QAAQ,CAACE,CAAC,GAAG,CAAL,CAAvB;AACA,UAAIK,OAAO,GAAGP,QAAQ,CAACE,CAAD,CAAtB;AACA,UAAIM,IAAI,GAAGR,QAAQ,CAACE,CAAC,GAAG,CAAL,CAAnB;AACA,UAAIO,MAAM,GAAGF,OAAO,CAACG,MAAR,KAAmBT,QAAhC;AACA,UAAIU,aAAa,GAAGhB,MAAM,CAACY,OAAO,CAACK,SAAT,CAA1B;AACA,UAAIC,gBAAgB,GAAG,KAAvB;AACA,UAAIC,gBAAgB,GAAG,KAAvB;AACA,UAAIC,cAAc,GAAG,IAArB;AACA,UAAIC,YAAY,GAAG,IAAnB;AACA,UAAIC,aAAa,GAAG,IAApB;;AAEA,UAAIX,QAAJ,EAAc;AACZ,YAAIY,cAAc,GAAGvB,MAAM,CAACW,QAAQ,CAACM,SAAV,CAA3B;AACA,YAAIO,gBAAgB,GAAGxB,MAAM,CAACyB,QAAP,CACrBT,aAAa,CAACU,IAAd,CAAmBH,cAAnB,CADqB,CAAvB;AAGAL,QAAAA,gBAAgB,GAAGP,QAAQ,CAACI,MAAT,KAAoBH,OAAO,CAACG,MAA/C;;AAEA,YAAIG,gBAAgB,IAAIM,gBAAgB,CAACG,EAAjB,CAAoB,OAApB,IAA+B,CAAvD,EAA0D;AACxDP,UAAAA,cAAc,GAAG,KAAjB;AACD;;AAED,YAAII,gBAAgB,CAACG,EAAjB,CAAoB,OAApB,IAA+B,CAAnC,EAAsC;AACpCL,UAAAA,aAAa,GAAG,KAAhB;AACD;AACF;;AAED,UAAIT,IAAJ,EAAU;AACR,YAAIe,UAAU,GAAG5B,MAAM,CAACa,IAAI,CAACI,SAAN,CAAvB;AACA,YAAIY,YAAY,GAAG7B,MAAM,CAACyB,QAAP,CAAgBG,UAAU,CAACF,IAAX,CAAgBV,aAAhB,CAAhB,CAAnB;AACAG,QAAAA,gBAAgB,GAAGN,IAAI,CAACE,MAAL,KAAgBH,OAAO,CAACG,MAA3C;;AAEA,YAAII,gBAAgB,IAAIU,YAAY,CAACF,EAAb,CAAgB,OAAhB,IAA2B,CAAnD,EAAsD;AACpDN,UAAAA,YAAY,GAAG,KAAf;AACD;AACF;;AAEDX,MAAAA,YAAY,CAACoB,IAAb,eACE,QAAC,gBAAD;AAEE,QAAA,MAAM,EAAEhB,MAFV;AAGE,QAAA,cAAc,EAAEM,cAHlB;AAIE,QAAA,YAAY,EAAEC,YAJhB;AAKE,QAAA,aAAa,EAAEC,aALjB;AAME,QAAA,IAAI,EAAEV;AANR,SACOL,CADP;AAAA;AAAA;AAAA;AAAA,cADF;AAWAA,MAAAA,CAAC,IAAI,CAAL;AACD;;AAED,WAAOG,YAAP;AACD;;AA3D2B,CAA9B;AA8DA,eAAeP,qBAAf","sourcesContent":["import moment from \"moment\";\nimport React from \"react\";\nimport MessageComponent from \"../components/Message\";\nimport { Message } from \"../components/MessageList\";\n\nconst MessageBuilderService = {\n  getMessages(messages: Message[], myUserId: string) {\n    let i = 0;\n    let messageCount = messages.length;\n    let tempMessages = [];\n\n    while (i < messageCount) {\n      let previous = messages[i - 1];\n      let current = messages[i];\n      let next = messages[i + 1];\n      let isMine = current.author === myUserId;\n      let currentMoment = moment(current.timestamp);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = true;\n\n      if (previous) {\n        let previousMoment = moment(previous.timestamp);\n        let previousDuration = moment.duration(\n          currentMoment.diff(previousMoment)\n        );\n        prevBySameAuthor = previous.author === current.author;\n\n        if (prevBySameAuthor && previousDuration.as(\"hours\") < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as(\"hours\") < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        let nextMoment = moment(next.timestamp);\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as(\"hours\") < 1) {\n          endsSequence = false;\n        }\n      }\n\n      tempMessages.push(\n        <MessageComponent\n          key={i}\n          isMine={isMine}\n          startsSequence={startsSequence}\n          endsSequence={endsSequence}\n          showTimestamp={showTimestamp}\n          data={current}\n        />\n      );\n      \n      i += 1;\n    }\n\n    return tempMessages;\n  },\n};\n\nexport default MessageBuilderService;\n"]},"metadata":{},"sourceType":"module"}